---
description: 데이터베이스 쿼리 최적화, Redis 캐싱 전략, N+1 문제 해결, 비동기 처리, JVM 튜닝과 성능 모니터링 가이드를 제공합니다.
globs: 
alwaysApply: false
---
# ⚡ 성능 최적화 및 모니터링 규칙

## 🎯 성능 최적화 원칙

### 기본 성능 목표
- **API 응답 시간**: 95% 요청이 200ms 이내
- **데이터베이스 쿼리**: 평균 50ms 이내
- **메모리 사용량**: 힙 메모리 80% 미만 유지
- **CPU 사용률**: 평상시 70% 미만 유지

### 최적화 우선순위
1. **데이터베이스 최적화** (가장 큰 성능 영향)
2. **캐싱 전략** (반복 조회 최적화)
3. **비동기 처리** (응답 시간 단축)
4. **메모리 관리** (GC 최적화)

## 🗄️ 데이터베이스 최적화

### JPA 성능 최적화 설정
```yaml
spring:
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        # 배치 처리 최적화
        jdbc:
          batch_size: 1000
          order_inserts: true
          order_updates: true
        
        # 쿼리 최적화
        default_batch_fetch_size: 100
        enable_lazy_load_no_trans: false
        
        # 통계 및 모니터링
        generate_statistics: true
        session:
          events:
            log:
              LOG_QUERIES_SLOWER_THAN_MS: 100
```

### N+1 문제 해결
```java
@Entity
@NamedEntityGraph(
    name = "User.withRoles",
    attributeNodes = @NamedAttributeNode("roles")
)
public class User {
    @ManyToMany(fetch = FetchType.LAZY)
    @JoinTable(
        name = "user_roles",
        joinColumns = @JoinColumn(name = "user_id"),
        inverseJoinColumns = @JoinColumn(name = "role_id")
    )
    private Set<Role> roles = new HashSet<>();
}

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
    
    // EntityGraph 사용으로 N+1 문제 해결
    @EntityGraph("User.withRoles")
    @Query("SELECT u FROM User u WHERE u.status = :status")
    List<User> findAllActiveUsers(@Param("status") UserStatus status);
    
    // Fetch Join 사용
    @Query("SELECT DISTINCT u FROM User u LEFT JOIN FETCH u.roles WHERE u.email = :email")
    Optional<User> findByEmailWithRoles(@Param("email") String email);
    
    // DTO Projection으로 필요한 필드만 조회
    @Query("SELECT new com.sbpb.ddobak.server.domain.user.dto.UserSummaryDto" +
           "(u.id, u.email, u.name, u.status) FROM User u WHERE u.status = :status")
    List<UserSummaryDto> findUserSummaries(@Param("status") UserStatus status);
}
```

### 커스텀 Repository 구현 (복잡한 쿼리 최적화)
```java
@Repository
@RequiredArgsConstructor
public class UserRepositoryCustomImpl implements UserRepositoryCustom {
    
    private final JPAQueryFactory queryFactory;
    
    @Override
    public Page<UserResponse> findUsersWithFilters(UserSearchCondition condition, Pageable pageable) {
        QUser user = QUser.user;
        QRole role = QRole.role;
        
        // 조건절 동적 생성
        BooleanBuilder builder = new BooleanBuilder();
        
        if (StringUtils.hasText(condition.getEmail())) {
            builder.and(user.email.containsIgnoreCase(condition.getEmail()));
        }
        
        if (condition.getStatus() != null) {
            builder.and(user.status.eq(condition.getStatus()));
        }
        
        if (condition.getCreatedAfter() != null) {
            builder.and(user.createdAt.goe(condition.getCreatedAfter()));
        }
        
        // 카운트 쿼리 (성능 최적화)
        Long total = queryFactory
            .select(user.count())
            .from(user)
            .where(builder)
            .fetchOne();
        
        // 데이터 조회 쿼리
        List<UserResponse> content = queryFactory
            .select(Projections.constructor(UserResponse.class,
                user.id,
                user.email,
                user.name,
                user.status,
                user.createdAt,
                user.updatedAt))
            .from(user)
            .where(builder)
            .orderBy(getOrderSpecifier(pageable.getSort()))
            .offset(pageable.getOffset())
            .limit(pageable.getPageSize())
            .fetch();
        
        return new PageImpl<>(content, pageable, total);
    }
    
    private OrderSpecifier<?>[] getOrderSpecifier(Sort sort) {
        QUser user = QUser.user;
        return sort.stream()
            .map(order -> {
                String property = order.getProperty();
                boolean isAsc = order.getDirection().isAscending();
                
                return switch (property) {
                    case "email" -> isAsc ? user.email.asc() : user.email.desc();
                    case "name" -> isAsc ? user.name.asc() : user.name.desc();
                    case "createdAt" -> isAsc ? user.createdAt.asc() : user.createdAt.desc();
                    default -> isAsc ? user.id.asc() : user.id.desc();
                };
            })
            .toArray(OrderSpecifier[]::new);
    }
}
```

### 데이터베이스 인덱스 최적화
```sql
-- 복합 인덱스 생성 (쿼리 패턴에 따라)
CREATE INDEX idx_user_status_created_at ON users(status, created_at);
CREATE INDEX idx_user_email_status ON users(email, status);

-- 부분 인덱스 (조건부 인덱스)
CREATE INDEX idx_active_users_email ON users(email) WHERE status = 'ACTIVE';

-- 커버링 인덱스 (필요한 모든 컬럼 포함)
CREATE INDEX idx_user_covering ON users(status, email, name, created_at);
```

## 🚀 캐싱 전략

### Redis 캐시 설정
```java
@Configuration
@EnableCaching
public class CacheConfig {
    
    @Bean
    public CacheManager cacheManager(RedisConnectionFactory connectionFactory) {
        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig()
            .entryTtl(Duration.ofMinutes(30))
            .serializeKeysWith(RedisSerializationContext.SerializationPair
                .fromSerializer(new StringRedisSerializer()))
            .serializeValuesWith(RedisSerializationContext.SerializationPair
                .fromSerializer(new GenericJackson2JsonRedisSerializer()));
        
        return RedisCacheManager.builder(connectionFactory)
            .cacheDefaults(config)
            .transactionAware()
            .build();
    }
    
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory connectionFactory) {
        RedisTemplate<String, Object> template = new RedisTemplate<>();
        template.setConnectionFactory(connectionFactory);
        template.setKeySerializer(new StringRedisSerializer());
        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());
        template.setHashKeySerializer(new StringRedisSerializer());
        template.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());
        return template;
    }
}
```

### 캐시 적용 예시
```java
@Service
@RequiredArgsConstructor
@Slf4j
public class UserService {
    
    private final UserRepository userRepository;
    private final RedisTemplate<String, Object> redisTemplate;
    
    // 단순 조회 캐싱
    @Cacheable(value = "users", key = "#userId")
    public UserResponse getUserById(Long userId) {
        log.debug("Fetching user from database: {}", userId);
        
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new UserNotFoundException(userId));
        
        return UserResponse.from(user);
    }
    
    // 조건부 캐싱
    @Cacheable(value = "users", key = "#email", condition = "#email.length() > 0")
    public Optional<UserResponse> getUserByEmail(String email) {
        return userRepository.findByEmail(email)
            .map(UserResponse::from);
    }
    
    // 캐시 업데이트
    @CachePut(value = "users", key = "#result.id")
    public UserResponse updateUser(Long userId, UpdateUserRequest request) {
        User user = userRepository.findById(userId)
            .orElseThrow(() -> new UserNotFoundException(userId));
        
        user.updateInfo(request.getName());
        User updatedUser = userRepository.save(user);
        
        return UserResponse.from(updatedUser);
    }
    
    // 캐시 삭제
    @CacheEvict(value = "users", key = "#userId")
    public void deleteUser(Long userId) {
        userRepository.deleteById(userId);
    }
    
    // 복잡한 캐싱 로직
    public List<UserResponse> getPopularUsers() {
        String cacheKey = "popular_users";
        
        // 캐시에서 조회 시도
        List<UserResponse> cachedUsers = (List<UserResponse>) 
            redisTemplate.opsForValue().get(cacheKey);
        
        if (cachedUsers != null) {
            log.debug("Retrieved popular users from cache");
            return cachedUsers;
        }
        
        // 캐시 미스 시 데이터베이스에서 조회
        List<User> users = userRepository.findPopularUsers();
        List<UserResponse> responses = users.stream()
            .map(UserResponse::from)
            .collect(Collectors.toList());
        
        // 캐시에 저장 (5분 TTL)
        redisTemplate.opsForValue().set(cacheKey, responses, Duration.ofMinutes(5));
        
        log.debug("Cached popular users for 5 minutes");
        return responses;
    }
}
```

### 캐시 키 설계 원칙
```java
@Component
public class CacheKeyGenerator {
    
    private static final String DELIMITER = ":";
    
    public static String userKey(Long userId) {
        return "user" + DELIMITER + userId;
    }
    
    public static String userSessionKey(Long userId, String sessionId) {
        return "user_session" + DELIMITER + userId + DELIMITER + sessionId;
    }
    
    public static String searchResultKey(String query, int page, int size) {
        return "search" + DELIMITER + 
               DigestUtils.md5DigestAsHex(query.getBytes()) + DELIMITER + 
               page + DELIMITER + size;
    }
    
    // 태그 기반 캐시 키 (일괄 삭제용)
    public static String userTaggedKey(Long userId) {
        return "tag:user:" + userId;
    }
}
```

## ⚡ 비동기 처리

### Async 설정
```java
@Configuration
@EnableAsync
public class AsyncConfig {
    
    @Bean(name = "taskExecutor")
    public TaskExecutor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(10);
        executor.setMaxPoolSize(50);
        executor.setQueueCapacity(100);
        executor.setThreadNamePrefix("async-task-");
        executor.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());
        executor.initialize();
        return executor;
    }
    
    @Bean(name = "emailExecutor")
    public TaskExecutor emailExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
        executor.setCorePoolSize(5);
        executor.setMaxPoolSize(10);
        executor.setQueueCapacity(50);
        executor.setThreadNamePrefix("email-task-");
        executor.initialize();
        return executor;
    }
}
```

### 비동기 메서드 구현
```java
@Service
@RequiredArgsConstructor
@Slf4j
public class NotificationService {
    
    private final EmailService emailService;
    private final SmsService smsService;
    
    @Async("emailExecutor")
    public CompletableFuture<Void> sendWelcomeEmail(String email, String name) {
        try {
            log.info("Sending welcome email to: {}", email);
            emailService.sendWelcomeEmail(email, name);
            log.info("Welcome email sent successfully to: {}", email);
            return CompletableFuture.completedFuture(null);
        } catch (Exception e) {
            log.error("Failed to send welcome email to: {}", email, e);
            return CompletableFuture.failedFuture(e);
        }
    }
    
    @Async("taskExecutor")
    public CompletableFuture<String> processLargeFile(String filePath) {
        try {
            log.info("Starting file processing: {}", filePath);
            
            // 대용량 파일 처리 로직
            String result = performFileProcessing(filePath);
            
            log.info("File processing completed: {}", filePath);
            return CompletableFuture.completedFuture(result);
        } catch (Exception e) {
            log.error("File processing failed: {}", filePath, e);
            return CompletableFuture.failedFuture(e);
        }
    }
    
    // 여러 비동기 작업 조합
    public CompletableFuture<UserNotificationResult> sendUserNotifications(Long userId) {
        CompletableFuture<Void> emailFuture = sendWelcomeEmail(user.getEmail(), user.getName());
        CompletableFuture<Void> smsFuture = sendWelcomeSms(user.getPhone(), user.getName());
        
        return CompletableFuture.allOf(emailFuture, smsFuture)
            .thenApply(v -> UserNotificationResult.success(userId))
            .exceptionally(ex -> {
                log.error("Failed to send notifications for user: {}", userId, ex);
                return UserNotificationResult.failure(userId, ex.getMessage());
            });
    }
}
```

## 📊 성능 모니터링

### Actuator 설정
```yaml
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,httptrace
  endpoint:
    health:
      show-details: when_authorized
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      percentiles:
        http.server.requests: 0.5, 0.95, 0.99
```

### 커스텀 메트릭스
```java
@Component
@RequiredArgsConstructor
public class UserMetrics {
    
    private final MeterRegistry meterRegistry;
    private final Counter userCreationCounter;
    private final Timer userServiceTimer;
    private final Gauge activeUserGauge;
    
    public UserMetrics(MeterRegistry meterRegistry, UserRepository userRepository) {
        this.meterRegistry = meterRegistry;
        
        // 카운터 메트릭
        this.userCreationCounter = Counter.builder("user.creation.count")
            .description("Number of users created")
            .register(meterRegistry);
        
        // 타이머 메트릭
        this.userServiceTimer = Timer.builder("user.service.duration")
            .description("User service method execution time")
            .register(meterRegistry);
        
        // 게이지 메트릭
        this.activeUserGauge = Gauge.builder("user.active.count")
            .description("Number of active users")
            .register(meterRegistry, userRepository, this::getActiveUserCount);
    }
    
    public void incrementUserCreation() {
        userCreationCounter.increment();
    }
    
    public Timer.Sample startTimer() {
        return Timer.start(meterRegistry);
    }
    
    public void recordUserServiceTime(Timer.Sample sample) {
        sample.stop(userServiceTimer);
    }
    
    private double getActiveUserCount(UserRepository userRepository) {
        return userRepository.countByStatus(UserStatus.ACTIVE);
    }
}

@Service
@RequiredArgsConstructor
public class UserService {
    
    private final UserRepository userRepository;
    private final UserMetrics userMetrics;
    
    public UserResponse createUser(CreateUserRequest request) {
        Timer.Sample sample = userMetrics.startTimer();
        
        try {
            // 사용자 생성 로직
            User user = // ... 사용자 생성
            User savedUser = userRepository.save(user);
            
            userMetrics.incrementUserCreation();
            
            return UserResponse.from(savedUser);
        } finally {
            userMetrics.recordUserServiceTime(sample);
        }
    }
}
```

### APM 통합 (Application Performance Monitoring)
```java
@Configuration
public class TracingConfig {
    
    @Bean
    public Sampler alwaysSampler() {
        return Sampler.create(1.0f); // 100% 샘플링 (개발환경)
        // return Sampler.create(0.1f); // 10% 샘플링 (운영환경)
    }
    
    @Bean
    public OpenTracing jaegerTracer() {
        return Configuration.fromEnv().getTracer();
    }
}

// 메서드 레벨 트레이싱
@NewSpan("user-service")
public UserResponse createUser(@SpanTag("email") String email, CreateUserRequest request) {
    // 스팬에 추가 정보 기록
    Span span = tracer.activeSpan();
    if (span != null) {
        span.setTag("user.request.size", request.toString().length());
        span.log("Starting user creation process");
    }
    
    // 비즈니스 로직
    UserResponse response = processUserCreation(request);
    
    if (span != null) {
        span.setTag("user.id", response.getId());
        span.log("User creation completed successfully");
    }
    
    return response;
}
```

## 🔧 JVM 및 GC 최적화

### JVM 옵션 (application.yml)
```yaml
# JVM 힙 메모리 설정
JAVA_OPTS: >
  -Xms2g 
  -Xmx4g
  -XX:NewRatio=1
  -XX:SurvivorRatio=8
  
  # G1GC 사용 (Java 17 권장)
  -XX:+UseG1GC
  -XX:MaxGCPauseMillis=200
  -XX:G1HeapRegionSize=16m
  
  # GC 로깅
  -Xlog:gc*:gc.log:time,tags
  
  # 메모리 덤프 (OOM 시)
  -XX:+HeapDumpOnOutOfMemoryError
  -XX:HeapDumpPath=/logs/heapdump.hprof
  
  # 네이티브 메모리 트래킹
  -XX:NativeMemoryTracking=summary
```

### 메모리 누수 방지
```java
@Service
public class FileProcessingService {
    
    // ❌ 메모리 누수 위험
    private static final Map<String, ProcessingResult> CACHE = new HashMap<>();
    
    // ✅ 메모리 안전한 캐시
    private final Cache<String, ProcessingResult> cache = Caffeine.newBuilder()
        .maximumSize(1000)
        .expireAfterWrite(Duration.ofHours(1))
        .removalListener((key, value, cause) -> {
            if (value instanceof Closeable) {
                try {
                    ((Closeable) value).close();
                } catch (IOException e) {
                    log.warn("Failed to close resource: {}", key, e);
                }
            }
        })
        .build();
    
    public ProcessingResult processFile(String fileName) {
        return cache.get(fileName, this::doProcessFile);
    }
    
    // 리소스 정리 보장
    @PreDestroy
    public void cleanup() {
        cache.invalidateAll();
    }
}
```

## 📋 성능 최적화 체크리스트

### 데이터베이스 최적화
- [ ] N+1 쿼리 문제 해결 (EntityGraph, Fetch Join)
- [ ] 적절한 인덱스 생성 및 활용
- [ ] 쿼리 실행 계획 분석 및 최적화
- [ ] 배치 처리 활용 (Batch Insert/Update)
- [ ] 커넥션 풀 설정 최적화

### 캐싱 전략
- [ ] 자주 조회되는 데이터 캐싱
- [ ] 적절한 캐시 TTL 설정
- [ ] 캐시 무효화 전략 구현
- [ ] 캐시 히트율 모니터링

### 비동기 처리
- [ ] I/O 집약적 작업 비동기 처리
- [ ] 적절한 스레드 풀 설정
- [ ] 백프레셔 처리 구현
- [ ] 예외 처리 및 모니터링

### 모니터링 및 측정
- [ ] 응답 시간 메트릭 수집
- [ ] 에러율 모니터링
- [ ] 리소스 사용량 추적
- [ ] 알림 및 임계값 설정
