---
description: Spring Security, JWT 인증/인가, OAuth 2.0, 비밀번호 정책, 보안 취약점 방지와 보안 모범 사례를 제공합니다.
globs: 
alwaysApply: false
---
# 🔐 보안 가이드라인 및 인증 시스템

## 🛡️ 기본 보안 원칙

### 핵심 보안 규칙
- **최소 권한 원칙**: 필요한 최소한의 권한만 부여
- **다층 보안**: 여러 보안 계층으로 시스템 보호
- **보안 기본값**: 기본적으로 모든 것을 차단하고 필요한 것만 허용
- **민감 정보 보호**: 로그, 응답에서 민감 정보 제거

## 🔑 JWT 토큰 관리 규칙

### JWT 설정 및 구조
```java
@Component
@Slf4j
public class JwtUtils {
    
    @Value("${jwt.secret}")
    private String secretKey;
    
    @Value("${jwt.access-token-expiration:3600000}")  // 1시간
    private long accessTokenExpiration;
    
    @Value("${jwt.refresh-token-expiration:604800000}")  // 7일
    private long refreshTokenExpiration;
    
    private Key getSigningKey() {
        byte[] keyBytes = Decoders.BASE64.decode(secretKey);
        return Keys.hmacShaKeyFor(keyBytes);
    }
    
    public String generateAccessToken(User user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("userId", user.getId());
        claims.put("email", user.getEmail());
        claims.put("roles", user.getRoles().stream()
            .map(Role::getName)
            .collect(Collectors.toList()));
        
        return createToken(claims, user.getEmail(), accessTokenExpiration);
    }
    
    public String generateRefreshToken(User user) {
        Map<String, Object> claims = new HashMap<>();
        claims.put("userId", user.getId());
        claims.put("tokenType", "refresh");
        
        return createToken(claims, user.getEmail(), refreshTokenExpiration);
    }
    
    private String createToken(Map<String, Object> claims, String subject, long expiration) {
        return Jwts.builder()
            .setClaims(claims)
            .setSubject(subject)
            .setIssuedAt(new Date(System.currentTimeMillis()))
            .setExpiration(new Date(System.currentTimeMillis() + expiration))
            .signWith(getSigningKey(), SignatureAlgorithm.HS512)
            .compact();
    }
    
    public boolean validateToken(String token) {
        try {
            Jwts.parserBuilder()
                .setSigningKey(getSigningKey())
                .build()
                .parseClaimsJws(token);
            return true;
        } catch (ExpiredJwtException e) {
            log.warn("JWT token is expired: {}", e.getMessage());
        } catch (UnsupportedJwtException e) {
            log.warn("JWT token is unsupported: {}", e.getMessage());
        } catch (MalformedJwtException e) {
            log.warn("Invalid JWT token: {}", e.getMessage());
        } catch (SignatureException e) {
            log.warn("Invalid JWT signature: {}", e.getMessage());
        } catch (IllegalArgumentException e) {
            log.warn("JWT claims string is empty: {}", e.getMessage());
        }
        return false;
    }
}
```

### JWT 필터 구현
```java
@Component
@RequiredArgsConstructor
@Slf4j
public class JwtAuthenticationFilter extends OncePerRequestFilter {
    
    private final JwtUtils jwtUtils;
    private final UserDetailsService userDetailsService;
    
    @Override
    protected void doFilterInternal(HttpServletRequest request, 
                                   HttpServletResponse response, 
                                   FilterChain filterChain) throws ServletException, IOException {
        
        try {
            String token = extractTokenFromRequest(request);
            
            if (token != null && jwtUtils.validateToken(token)) {
                String username = jwtUtils.getUsernameFromToken(token);
                
                UserDetails userDetails = userDetailsService.loadUserByUsername(username);
                
                UsernamePasswordAuthenticationToken authToken = 
                    new UsernamePasswordAuthenticationToken(
                        userDetails, null, userDetails.getAuthorities());
                
                authToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                SecurityContextHolder.getContext().setAuthentication(authToken);
            }
        } catch (Exception e) {
            log.error("Cannot set user authentication: {}", e.getMessage());
        }
        
        filterChain.doFilter(request, response);
    }
    
    private String extractTokenFromRequest(HttpServletRequest request) {
        String bearerToken = request.getHeader("Authorization");
        if (StringUtils.hasText(bearerToken) && bearerToken.startsWith("Bearer ")) {
            return bearerToken.substring(7);
        }
        return null;
    }
    
    @Override
    protected boolean shouldNotFilter(HttpServletRequest request) {
        String path = request.getRequestURI();
        return path.startsWith("/api/v1/auth/") || 
               path.startsWith("/api/v1/health") ||
               path.startsWith("/swagger-ui/") ||
               path.startsWith("/v3/api-docs");
    }
}
```

## 🔒 Spring Security 설정

### SecurityConfig 클래스
```java
@Configuration
@EnableWebSecurity
@EnableMethodSecurity(prePostEnabled = true)
@RequiredArgsConstructor
public class SecurityConfig {
    
    private final JwtAuthenticationEntryPoint jwtAuthenticationEntryPoint;
    private final JwtAuthenticationFilter jwtAuthenticationFilter;
    private final PasswordEncoder passwordEncoder;
    
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable())
            .sessionManagement(session -> 
                session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
            .authorizeHttpRequests(authz -> authz
                // 공개 엔드포인트
                .requestMatchers("/api/v1/auth/**").permitAll()
                .requestMatchers("/api/v1/health").permitAll()
                .requestMatchers("/swagger-ui/**", "/v3/api-docs/**").permitAll()
                
                // 관리자 전용 엔드포인트
                .requestMatchers("/api/v1/admin/**").hasRole("ADMIN")
                
                // 인증 필요한 엔드포인트
                .requestMatchers("/api/v1/users/**").hasAnyRole("USER", "ADMIN")
                .requestMatchers("/api/v1/documents/**").hasAnyRole("USER", "ADMIN")
                
                // 나머지는 모두 인증 필요
                .anyRequest().authenticated()
            )
            .exceptionHandling(ex -> ex
                .authenticationEntryPoint(jwtAuthenticationEntryPoint)
            )
            .addFilterBefore(jwtAuthenticationFilter, UsernamePasswordAuthenticationFilter.class);
        
        return http.build();
    }
    
    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration authConfig) throws Exception {
        return authConfig.getAuthenticationManager();
    }
    
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider authProvider = new DaoAuthenticationProvider();
        authProvider.setUserDetailsService(userDetailsService());
        authProvider.setPasswordEncoder(passwordEncoder);
        return authProvider;
    }
    
    @Bean
    public UserDetailsService userDetailsService() {
        return new CustomUserDetailsService();
    }
}
```

### 커스텀 UserDetailsService
```java
@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class CustomUserDetailsService implements UserDetailsService {
    
    private final UserRepository userRepository;
    
    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userRepository.findByEmail(email)
            .orElseThrow(() -> new UsernameNotFoundException("User not found: " + email));
        
        return SecurityUser.from(user);
    }
}

@Getter
public class SecurityUser implements UserDetails {
    private final Long id;
    private final String email;
    private final String password;
    private final List<GrantedAuthority> authorities;
    private final boolean enabled;
    
    private SecurityUser(Long id, String email, String password, 
                        List<GrantedAuthority> authorities, boolean enabled) {
        this.id = id;
        this.email = email;
        this.password = password;
        this.authorities = authorities;
        this.enabled = enabled;
    }
    
    public static SecurityUser from(User user) {
        List<GrantedAuthority> authorities = user.getRoles().stream()
            .map(role -> new SimpleGrantedAuthority("ROLE_" + role.getName()))
            .collect(Collectors.toList());
        
        return new SecurityUser(
            user.getId(),
            user.getEmail(),
            user.getPassword(),
            authorities,
            user.isActive()
        );
    }
    
    @Override
    public String getUsername() {
        return email;
    }
    
    @Override
    public boolean isAccountNonExpired() {
        return true;
    }
    
    @Override
    public boolean isAccountNonLocked() {
        return true;
    }
    
    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }
    
    @Override
    public boolean isEnabled() {
        return enabled;
    }
}
```

## 🌐 OAuth 2.0 구현

### OAuth 클라이언트 인터페이스
```java
public interface OAuthClient {
    String getProviderName();
    OAuthUserInfo getUserInfo(String accessToken);
    boolean supports(OAuthProvider provider);
}

@Getter
@Builder
public class OAuthUserInfo {
    private final String providerId;
    private final String email;
    private final String name;
    private final String profileImageUrl;
    private final OAuthProvider provider;
}
```

### Google OAuth 클라이언트
```java
@Component
@RequiredArgsConstructor
@Slf4j
public class GoogleOAuthClient implements OAuthClient {
    
    @Value("${oauth.google.user-info-url}")
    private String userInfoUrl;
    
    private final RestTemplate restTemplate;
    
    @Override
    public String getProviderName() {
        return "google";
    }
    
    @Override
    public OAuthUserInfo getUserInfo(String accessToken) {
        try {
            HttpHeaders headers = new HttpHeaders();
            headers.setBearerAuth(accessToken);
            HttpEntity<String> entity = new HttpEntity<>(headers);
            
            ResponseEntity<GoogleUserResponse> response = restTemplate.exchange(
                userInfoUrl,
                HttpMethod.GET,
                entity,
                GoogleUserResponse.class
            );
            
            GoogleUserResponse userResponse = response.getBody();
            
            return OAuthUserInfo.builder()
                .providerId(userResponse.getId())
                .email(userResponse.getEmail())
                .name(userResponse.getName())
                .profileImageUrl(userResponse.getPicture())
                .provider(OAuthProvider.GOOGLE)
                .build();
                
        } catch (Exception e) {
            log.error("Failed to get user info from Google: {}", e.getMessage());
            throw new OAuthException("Failed to get user info from Google", e);
        }
    }
    
    @Override
    public boolean supports(OAuthProvider provider) {
        return provider == OAuthProvider.GOOGLE;
    }
}

@Getter
@JsonIgnoreProperties(ignoreUnknown = true)
public class GoogleUserResponse {
    private String id;
    private String email;
    private String name;
    private String picture;
    
    @JsonProperty("verified_email")
    private boolean verifiedEmail;
}
```

### Apple OAuth 클라이언트
```java
@Component
@RequiredArgsConstructor
@Slf4j
public class AppleOAuthClient implements OAuthClient {
    
    private final AppleJwtUtils appleJwtUtils;
    
    @Override
    public String getProviderName() {
        return "apple";
    }
    
    @Override
    public OAuthUserInfo getUserInfo(String identityToken) {
        try {
            // Apple Identity Token 검증 및 파싱
            Claims claims = appleJwtUtils.parseAndValidateToken(identityToken);
            
            return OAuthUserInfo.builder()
                .providerId(claims.getSubject())
                .email(claims.get("email", String.class))
                .name(claims.get("name", String.class))
                .provider(OAuthProvider.APPLE)
                .build();
                
        } catch (Exception e) {
            log.error("Failed to parse Apple identity token: {}", e.getMessage());
            throw new OAuthException("Failed to parse Apple identity token", e);
        }
    }
    
    @Override
    public boolean supports(OAuthProvider provider) {
        return provider == OAuthProvider.APPLE;
    }
}
```

## 🔐 비밀번호 정책

### 비밀번호 검증 규칙
```java
@Component
public class PasswordValidator {
    
    private static final int MIN_LENGTH = 8;
    private static final int MAX_LENGTH = 128;
    private static final String SPECIAL_CHARACTERS = "!@#$%^&*()_+-=[]{}|;:,.<>?";
    
    public void validatePassword(String password) {
        List<String> errors = new ArrayList<>();
        
        if (password == null || password.length() < MIN_LENGTH) {
            errors.add("Password must be at least " + MIN_LENGTH + " characters long");
        }
        
        if (password != null && password.length() > MAX_LENGTH) {
            errors.add("Password must not exceed " + MAX_LENGTH + " characters");
        }
        
        if (password != null) {
            if (!password.matches(".*[a-z].*")) {
                errors.add("Password must contain at least one lowercase letter");
            }
            
            if (!password.matches(".*[A-Z].*")) {
                errors.add("Password must contain at least one uppercase letter");
            }
            
            if (!password.matches(".*\\d.*")) {
                errors.add("Password must contain at least one digit");
            }
            
            if (!containsSpecialCharacter(password)) {
                errors.add("Password must contain at least one special character");
            }
        }
        
        if (!errors.isEmpty()) {
            throw new InvalidPasswordException(String.join(", ", errors));
        }
    }
    
    private boolean containsSpecialCharacter(String password) {
        return password.chars()
            .anyMatch(ch -> SPECIAL_CHARACTERS.indexOf(ch) >= 0);
    }
}
```

## 🚫 보안 취약점 방지

### 1. SQL Injection 방지
```java
// ✅ 좋은 예: JPA Repository 사용
@Query("SELECT u FROM User u WHERE u.email = :email AND u.status = :status")
Optional<User> findByEmailAndStatus(@Param("email") String email, 
                                   @Param("status") UserStatus status);

// ❌ 나쁜 예: 동적 쿼리 문자열 조합
@Query(value = "SELECT * FROM users WHERE email = '" + email + "'", nativeQuery = true)
List<User> findByEmailUnsafe(String email);
```

### 2. XSS (Cross-Site Scripting) 방지
```java
@Component
public class HtmlSanitizer {
    
    private final Whitelist whitelist = Whitelist.basic();
    
    public String sanitize(String input) {
        if (input == null) {
            return null;
        }
        return Jsoup.clean(input, whitelist);
    }
}

// DTO에서 사용
@Getter
@Setter
public class CreatePostRequest {
    
    @NotBlank
    @Size(max = 200)
    private String title;
    
    @NotBlank
    @Size(max = 5000)
    private String content;
    
    // Setter에서 XSS 방지
    public void setTitle(String title) {
        this.title = htmlSanitizer.sanitize(title);
    }
    
    public void setContent(String content) {
        this.content = htmlSanitizer.sanitize(content);
    }
}
```

### 3. CSRF 방지 (REST API에서는 JWT 사용으로 자동 방지)
```java
// JWT 기반 API에서는 CSRF 비활성화
http.csrf(csrf -> csrf.disable())
```

### 4. Rate Limiting 구현
```java
@Component
@RequiredArgsConstructor
public class RateLimitingFilter implements Filter {
    
    private final RedisTemplate<String, String> redisTemplate;
    
    @Override
    public void doFilter(ServletRequest request, ServletResponse response, 
                        FilterChain chain) throws IOException, ServletException {
        
        HttpServletRequest httpRequest = (HttpServletRequest) request;
        HttpServletResponse httpResponse = (HttpServletResponse) response;
        
        String clientIp = getClientIp(httpRequest);
        String key = "rate_limit:" + clientIp;
        
        String count = redisTemplate.opsForValue().get(key);
        
        if (count == null) {
            redisTemplate.opsForValue().set(key, "1", Duration.ofMinutes(1));
        } else if (Integer.parseInt(count) >= 100) { // 분당 100회 제한
            httpResponse.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());
            httpResponse.getWriter().write("Rate limit exceeded");
            return;
        } else {
            redisTemplate.opsForValue().increment(key);
        }
        
        chain.doFilter(request, response);
    }
    
    private String getClientIp(HttpServletRequest request) {
        String xForwardedFor = request.getHeader("X-Forwarded-For");
        if (xForwardedFor != null && !xForwardedFor.isEmpty()) {
            return xForwardedFor.split(",")[0].trim();
        }
        return request.getRemoteAddr();
    }
}
```

## 📋 보안 체크리스트

### 개발 시 필수 확인사항
- [ ] 모든 API 엔드포인트에 적절한 인증/인가 설정
- [ ] 민감 정보(비밀번호, 토큰)가 로그에 노출되지 않음
- [ ] SQL Injection 방지를 위한 PreparedStatement 사용
- [ ] XSS 방지를 위한 입력값 검증 및 이스케이프
- [ ] HTTPS 강제 사용 (운영 환경)
- [ ] 적절한 CORS 설정
- [ ] 파일 업로드 시 파일 타입 및 크기 검증
- [ ] Rate Limiting 적용
- [ ] 에러 메시지에서 시스템 정보 노출 방지

### 배포 전 보안 검증
- [ ] 기본 계정 비밀번호 변경
- [ ] 불필요한 포트 차단
- [ ] 보안 헤더 설정 (HSTS, X-Frame-Options 등)
- [ ] 로그 레벨 적절히 설정 (운영 환경에서 DEBUG 비활성화)
- [ ] JWT Secret Key 충분히 복잡하게 설정 (최소 256bit)
- [ ] 데이터베이스 접근 권한 최소화
