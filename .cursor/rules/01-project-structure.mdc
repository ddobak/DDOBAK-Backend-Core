---
description: Spring Boot 프로젝트 패키지 구조, 도메인별 계층 분리, Clean Architecture 설계 원칙과 명명 규칙을 제공합니다.
globs: 
alwaysApply: false
---
# 📦 Spring Boot 프로젝트 구조 규칙

## 🎯 핵심 원칙
- **Java 17**, **Spring Boot 3.5.0** 고정 (절대 버전 변경 금지)
- **Clean Code & Clean Architecture** 원칙 준수
- **도메인별 완전한 계층 분리** (controller, service, dto, entity, repository, exception)
- **설정 관리**: `application.yml` 사용, 환경별 분리 (.env 보완)

## 🌐 메시지 정책 (절대 준수)
- **시스템 메시지**: API 응답, 에러 메시지, 로그 → **영어 사용**
- **코드 주석**: **한국어 사용**
- **에러 코드**: 천의 자리 체계 (2xxx 성공, 4xxx 클라이언트, 5xxx 서버)
- **API 응답**: 모든 API는 `ApiResponse<T>` 형식 필수

## 🔢 새로운 응답 코드 체계 (2024년 6월 업데이트)

### 도메인별 천의 자리 소유
- **1xxx**: Auth 도메인 (인증/인가)
- **2xxx**: User 도메인 (사용자 관리)  
- **3xxx**: DocumentProcess 도메인 (문서 처리) ✅ 구현 완료
- **4xxx**: ExternalContent 도메인 (외부 컨텐츠)
- **5xxx**: Common/System (공통 시스템 에러) ✅ 구현 완료

### 각 도메인 내 분류
- **x000~x099**: 정상 또는 경고 수준
- **x100~x999**: 에러

### 현재 구현 상태
```
✅ 완료:
- Common/System (5xxx): 5000-5099 성공, 5100-5399 에러
- DocumentProcess (3xxx): 3000-3099 성공, 3100-3399 에러

🔄 향후 구현 예정:
- Auth (1xxx): 1000-1099 성공, 1100-1999 에러
- User (2xxx): 2000-2099 성공, 2100-2999 에러  
- ExternalContent (4xxx): 4000-4099 성공, 4100-4999 에러
```

## 📁 필수 디렉터리 구조

```
src/main/java/com/sbpb/ddobak/server/
├── config/                       # 전역 설정
│   ├── SecurityConfig.java       # Spring Security 설정
│   ├── SwaggerConfig.java        # API 문서 설정
│   ├── RedisConfig.java          # Redis 연결 설정
│   ├── SQSConfig.java            # AWS SQS 설정
│   └── S3Config.java             # AWS S3 설정
│
├── domain/                       # 도메인별 모듈
│   ├── user/                     # 사용자 도메인 (2xxx)
│   │   ├── controller/
│   │   ├── service/
│   │   ├── dto/
│   │   ├── entity/
│   │   ├── repository/
│   │   └── exception/           # 향후 User 도메인 전용 예외 (2xxx)
│   ├── auth/                     # 인증 도메인 (1xxx)
│   │   ├── controller/
│   │   ├── service/
│   │   ├── dto/
│   │   ├── entity/
│   │   ├── repository/
│   │   ├── exception/           # 향후 Auth 도메인 전용 예외 (1xxx)
│   │   └── oauth/               # 소셜 로그인 클라이언트
│   ├── documentProcess/         # 문서 처리 도메인 (3xxx) ✅ 완성
│   │   ├── controller/
│   │   ├── service/
│   │   ├── dto/
│   │   ├── entity/
│   │   ├── repository/
│   │   └── exception/           # DocumentProcess 도메인 전용 예외 (3xxx) ✅
│   │       ├── DocumentProcessErrorCode.java      # 3100-3399 에러
│   │       ├── DocumentProcessSuccessCode.java    # 3000-3099 성공
│   │       ├── DocumentProcessBusinessException.java
│   │       ├── DocumentProcessApiResponse.java
│   │       ├── DocumentProcessExceptionHandler.java
│   │       ├── ContractExceptions.java
│   │       └── ContractAnalysisExceptions.java
│   └── externalContent/         # 외부 컨텐츠 도메인 (4xxx)
│       ├── controller/
│       ├── service/
│       ├── dto/
│       ├── entity/
│       ├── repository/
│       └── exception/           # 향후 ExternalContent 도메인 전용 예외 (4xxx)
│
├── common/                      # 공통 모듈 ✅ 완성
│   ├── exception/               # 예외 처리 ✅ 완성
│   │   ├── ErrorCode.java       # 공통 시스템 에러 (5xxx) ✅
│   │   ├── BusinessException.java # 예외 기반 클래스 (추적 ID, 속성 지원)
│   │   ├── GlobalExceptionHandler.java # 전역 예외 처리
│   │   ├── ValidationException.java # 검증 실패 예외
│   │   ├── ResourceNotFoundException.java # 리소스 없음 예외
│   │   ├── DuplicateResourceException.java # 중복 리소스 예외
│   │   └── ExternalServiceException.java # 외부 서비스 예외
│   ├── response/                # 공통 응답 형식 ✅ 완성
│   │   ├── ApiResponse.java     # 통일된 API 응답 (Generic, 추적 ID)
│   │   ├── SuccessCode.java     # 공통 시스템 성공 코드 (5xxx) ✅
│   │   └── PageResponse.java    # 페이징 응답 (Spring Data 연동)
│   └── utils/                   # 유틸리티
│
└── ServerApplication.java       # 메인 클래스
```

## 🔄 계층별 역할 정의

### Controller 계층
- `@RestController` 사용
- API 진입점 역할
- 요청 검증 (`@Valid`)
- 응답 형식 통일 (`ApiResponse<T>`)

### Service 계층
- 비즈니스 로직 처리
- `@Transactional` 적절한 사용
- 의존성 주입을 통한 느슨한 결합

### Repository 계층
- `JpaRepository<Entity, ID>` 상속
- 커스텀 쿼리는 QueryDSL 또는 `@Query` 사용

### Entity 계층
- JPA 엔티티 정의
- 비즈니스 메서드 포함 가능
- DTO 변환은 별도 메서드로 분리

### DTO 계층
- 계층 간 데이터 전달
- `Request`, `Response` 접미사 사용
- Lombok 적극 활용 (`@Builder`, `@Getter` 등)

## 📋 명명 규칙

### 파일 명명
- Controller: `{Domain}Controller.java`
- Service: `{Domain}Service.java`
- Repository: `{Domain}Repository.java`
- Entity: `{Domain}.java` (단수형)
- DTO: `{Purpose}Request.java`, `{Purpose}Response.java`

### 패키지 명명
- 소문자, camelCase 사용
- 도메인명은 단수형 사용 (user, auth)

## 🚫 금지 사항
- **Java 17 또는 Spring Boot 3.5.0 버전 변경 절대 금지**
- Entity를 Controller에서 직접 노출 금지
- 순환 의존성 생성 금지
- 도메인 간 직접 의존성 금지 (common을 통한 간접 참조만 허용)
