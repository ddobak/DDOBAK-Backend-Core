---
description: Swagger/OpenAPI 문서화, API 명세 작성, 코드 주석 가이드, README 작성과 개발자 문서화 표준을 제공합니다.
globs: 
alwaysApply: false
---
# 📚 문서화 표준 및 API 문서화 규칙

## 📝 문서화 원칙

### 핵심 문서화 철학
- **코드 자체가 문서**: 명확한 이름과 구조로 자명한 코드 작성
- **최신성 유지**: 코드 변경 시 문서도 함께 업데이트
- **사용자 중심**: 개발자와 API 사용자 관점에서 작성
- **간결성**: 필요한 정보만 명확하게 전달

## 🔧 Swagger/OpenAPI 설정

### SwaggerConfig 클래스
```java
@Configuration
@EnableOpenApi
public class SwaggerConfig {
    
    @Bean
    public OpenAPI openAPI() {
        return new OpenAPI()
            .info(apiInfo())
            .addSecurityItem(securityRequirement())
            .components(apiComponents())
            .servers(servers());
    }
    
    private Info apiInfo() {
        return new Info()
            .title("DDOBAK API")
            .description("DDOBAK 서비스 REST API 문서")
            .version("v1.0.0")
            .contact(new Contact()
                .name("DDOBAK Development Team")
                .email("dev@ddobak.com")
                .url("https://github.com/ddobak/api"))
            .license(new License()
                .name("MIT License")
                .url("https://opensource.org/licenses/MIT"));
    }
    
    private SecurityRequirement securityRequirement() {
        return new SecurityRequirement().addList("bearerAuth");
    }
    
    private Components apiComponents() {
        return new Components()
            .addSecuritySchemes("bearerAuth", new SecurityScheme()
                .type(SecurityScheme.Type.HTTP)
                .scheme("bearer")
                .bearerFormat("JWT")
                .in(SecurityScheme.In.HEADER)
                .name("Authorization"));
    }
    
    private List<Server> servers() {
        return Arrays.asList(
            new Server().url("http://localhost:8080").description("로컬 개발 서버"),
            new Server().url("https://api-dev.ddobak.com").description("개발 서버"),
            new Server().url("https://api.ddobak.com").description("운영 서버")
        );
    }
}
```

## 📖 API 문서화 가이드

### Controller 어노테이션 사용법
```java
@RestController
@RequestMapping("/api/v1/users")
@RequiredArgsConstructor
@Slf4j
@Tag(name = "User Management", description = "사용자 관리 API")
public class UserController {
    
    private final UserService userService;
    
    @Operation(
        summary = "사용자 생성",
        description = "새로운 사용자를 생성합니다. 이메일은 고유해야 하며, 비밀번호는 보안 정책을 준수해야 합니다.",
        tags = {"User Management"}
    )
    @ApiResponses(value = {
        @ApiResponse(
            responseCode = "201", 
            description = "사용자 생성 성공",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ApiResponse.class),
                examples = @ExampleObject(
                    name = "사용자 생성 성공 예시",
                    value = """
                        {
                          "success": true,
                          "data": {
                            "id": 1,
                            "email": "user@example.com",
                            "name": "김철수",
                            "status": "ACTIVE",
                            "createdAt": "2024-01-15T10:30:00"
                          },
                          "message": "User created successfully"
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "400", 
            description = "잘못된 요청 (유효성 검사 실패)",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ApiResponse.class),
                examples = @ExampleObject(
                    name = "유효성 검사 실패 예시",
                    value = """
                        {
                          "success": false,
                          "error": {
                            "code": "INVALID_INPUT",
                            "message": "email: 올바른 이메일 형식이 아닙니다"
                          }
                        }
                        """
                )
            )
        ),
        @ApiResponse(
            responseCode = "409", 
            description = "이메일 중복",
            content = @Content(
                mediaType = "application/json",
                schema = @Schema(implementation = ApiResponse.class)
            )
        )
    })
    @PostMapping
    public ResponseEntity<ApiResponse<UserResponse>> createUser(
            @Parameter(description = "생성할 사용자 정보", required = true)
            @Valid @RequestBody CreateUserRequest request) {
        
        log.info("Creating user with email: {}", request.getEmail());
        
        UserResponse response = userService.createUser(request);
        
        return ResponseEntity.status(HttpStatus.CREATED)
            .body(ApiResponse.success(response, "User created successfully"));
    }
    
    @Operation(
        summary = "사용자 조회",
        description = "사용자 ID로 특정 사용자 정보를 조회합니다.",
        tags = {"User Management"}
    )
    @ApiResponses(value = {
        @ApiResponse(responseCode = "200", description = "사용자 조회 성공"),
        @ApiResponse(responseCode = "404", description = "사용자를 찾을 수 없음")
    })
    @GetMapping("/{userId}")
    public ResponseEntity<ApiResponse<UserResponse>> getUser(
            @Parameter(description = "조회할 사용자 ID", example = "1", required = true)
            @PathVariable Long userId) {
        
        UserResponse response = userService.getUserById(userId);
        
        return ResponseEntity.ok(ApiResponse.success(response));
    }
    
    @Operation(
        summary = "사용자 목록 조회",
        description = "페이징을 지원하는 사용자 목록을 조회합니다.",
        tags = {"User Management"}
    )
    @GetMapping
    public ResponseEntity<ApiResponse<PageResponse<UserResponse>>> getUsers(
            @Parameter(description = "페이지 번호 (0부터 시작)", example = "0")
            @RequestParam(defaultValue = "0") int page,
            
            @Parameter(description = "페이지 크기", example = "20")
            @RequestParam(defaultValue = "20") int size,
            
            @Parameter(description = "정렬 기준", example = "createdAt")
            @RequestParam(defaultValue = "createdAt") String sort,
            
            @Parameter(description = "정렬 방향", example = "desc")
            @RequestParam(defaultValue = "desc") String direction) {
        
        PageResponse<UserResponse> response = userService.getUsers(page, size, sort, direction);
        
        return ResponseEntity.ok(ApiResponse.success(response));
    }
}
```

### DTO 문서화
```java
@Schema(description = "사용자 생성 요청")
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class CreateUserRequest {
    
    @Schema(
        description = "사용자 이메일 주소", 
        example = "user@example.com",
        required = true,
        pattern = "^[A-Za-z0-9+_.-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$"
    )
    @NotBlank(message = "이메일은 필수입니다")
    @Email(message = "올바른 이메일 형식이 아닙니다")
    @Size(max = 100, message = "이메일은 100자를 초과할 수 없습니다")
    private String email;
    
    @Schema(
        description = "사용자 이름", 
        example = "김철수",
        required = true,
        minLength = 2,
        maxLength = 50
    )
    @NotBlank(message = "이름은 필수입니다")
    @Size(min = 2, max = 50, message = "이름은 2-50자 사이여야 합니다")
    private String name;
    
    @Schema(
        description = "비밀번호 (최소 8자, 대소문자, 숫자, 특수문자 포함)", 
        example = "Password123!",
        required = true,
        minLength = 8,
        maxLength = 128
    )
    @NotBlank(message = "비밀번호는 필수입니다")
    @Size(min = 8, max = 128, message = "비밀번호는 8-128자 사이여야 합니다")
    @Pattern(
        regexp = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]+$",
        message = "비밀번호는 대소문자, 숫자, 특수문자를 모두 포함해야 합니다"
    )
    private String password;
}

@Schema(description = "사용자 응답")
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class UserResponse {
    
    @Schema(description = "사용자 고유 ID", example = "1")
    private Long id;
    
    @Schema(description = "이메일 주소", example = "user@example.com")
    private String email;
    
    @Schema(description = "사용자 이름", example = "김철수")
    private String name;
    
    @Schema(description = "사용자 상태", example = "ACTIVE", allowableValues = {"ACTIVE", "INACTIVE", "SUSPENDED"})
    private UserStatus status;
    
    @Schema(description = "계정 생성 일시", example = "2024-01-15T10:30:00")
    private LocalDateTime createdAt;
    
    @Schema(description = "마지막 수정 일시", example = "2024-01-15T10:30:00")
    private LocalDateTime updatedAt;
    
    public static UserResponse from(User user) {
        return UserResponse.builder()
            .id(user.getId())
            .email(user.getEmail())
            .name(user.getName())
            .status(user.getStatus())
            .createdAt(user.getCreatedAt())
            .updatedAt(user.getUpdatedAt())
            .build();
    }
}
```

### 공통 응답 포맷 문서화
```java
@Schema(description = "API 공통 응답 포맷")
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ApiResponse<T> {
    
    @Schema(description = "요청 성공 여부", example = "true")
    private boolean success;
    
    @Schema(description = "응답 데이터")
    private T data;
    
    @Schema(description = "응답 메시지", example = "요청이 성공적으로 처리되었습니다")
    private String message;
    
    @Schema(description = "에러 정보 (실패 시에만 존재)")
    private ErrorResponse error;
    
    @Schema(description = "응답 시각", example = "2024-01-15T10:30:00")
    private LocalDateTime timestamp;
    
    public static <T> ApiResponse<T> success(T data) {
        return ApiResponse.<T>builder()
            .success(true)
            .data(data)
            .timestamp(LocalDateTime.now())
            .build();
    }
    
    public static <T> ApiResponse<T> success(T data, String message) {
        return ApiResponse.<T>builder()
            .success(true)
            .data(data)
            .message(message)
            .timestamp(LocalDateTime.now())
            .build();
    }
    
    public static <T> ApiResponse<T> error(ErrorCode errorCode, String message) {
        return ApiResponse.<T>builder()
            .success(false)
            .error(ErrorResponse.of(errorCode, message))
            .timestamp(LocalDateTime.now())
            .build();
    }
}

@Schema(description = "에러 응답")
@Getter
@Builder
@NoArgsConstructor
@AllArgsConstructor
public class ErrorResponse {
    
    @Schema(description = "에러 코드", example = "USER_NOT_FOUND")
    private String code;
    
    @Schema(description = "에러 메시지", example = "사용자를 찾을 수 없습니다")
    private String message;
    
    @Schema(description = "상세 에러 정보")
    private Map<String, Object> details;
    
    public static ErrorResponse of(ErrorCode errorCode, String message) {
        return ErrorResponse.builder()
            .code(errorCode.getCode())
            .message(message)
            .build();
    }
}
```

## 📋 코드 주석 가이드

### 클래스 레벨 주석
```java
/**
 * 사용자 관리 서비스
 * 
 * <p>사용자의 생성, 조회, 수정, 삭제 등 사용자와 관련된 모든 비즈니스 로직을 처리합니다.</p>
 * 
 * <p>주요 기능:</p>
 * <ul>
 *   <li>사용자 생성 및 이메일 중복 검사</li>
 *   <li>비밀번호 암호화 및 검증</li>
 *   <li>사용자 정보 조회 및 페이징</li>
 *   <li>사용자 상태 관리 (활성화/비활성화)</li>
 * </ul>
 * 
 * @author DDOBAK Development Team
 * @since 1.0.0
 * @version 1.0.0
 */
@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
@Slf4j
public class UserService {
    // 구현 내용...
}
```

### 메서드 레벨 주석
```java
/**
 * 새로운 사용자를 생성합니다.
 * 
 * <p>이메일 중복 검사를 수행하고, 비밀번호를 암호화하여 저장합니다.
 * 생성된 사용자는 기본적으로 ACTIVE 상태가 됩니다.</p>
 * 
 * @param request 사용자 생성 요청 정보 (이메일, 이름, 비밀번호 포함)
 * @return 생성된 사용자 정보 (ID, 이메일, 이름, 상태, 생성일시 포함)
 * @throws DuplicateEmailException 동일한 이메일이 이미 존재하는 경우
 * @throws InvalidPasswordException 비밀번호가 보안 정책을 위반하는 경우
 * 
 * @since 1.0.0
 */
@Transactional
public UserResponse createUser(CreateUserRequest request) {
    // 이메일 중복 검사
    validateEmailNotExists(request.getEmail());
    
    // 비밀번호 보안 정책 검증
    passwordValidator.validatePassword(request.getPassword());
    
    // 사용자 엔티티 생성
    User user = User.builder()
        .email(request.getEmail())
        .name(request.getName())
        .password(passwordEncoder.encode(request.getPassword()))
        .status(UserStatus.ACTIVE)
        .build();
    
    User savedUser = userRepository.save(user);
    
    log.info("User created successfully with ID: {}", savedUser.getId());
    
    return UserResponse.from(savedUser);
}
```

### 복잡한 로직 주석
```java
public List<UserResponse> findActiveUsersSince(LocalDateTime since) {
    // 활성 사용자 중에서 특정 시점 이후 생성된 사용자만 조회
    // 성능 최적화를 위해 인덱스를 활용한 복합 조건 사용
    List<User> users = userRepository.findActiveUsersSince(UserStatus.ACTIVE, since);
    
    // DTO 변환 시 Stream API 사용으로 메모리 효율성 확보
    return users.stream()
        .map(UserResponse::from)
        .collect(Collectors.toList());
}
```

## 📄 README 문서 구조

### 프로젝트 루트 README.md 템플릿
```markdown
# DDOBAK Server

DDOBAK 서비스의 백엔드 API 서버입니다.

## 🚀 Quick Start

### 요구사항
- Java 17
- Gradle 7.5+
- MySQL 8.0+
- Redis 7.0+

### 로컬 개발 환경 설정

1. 저장소 클론
```bash
git clone https://github.com/ddobak/ddobak-server.git
cd ddobak-server
```

2. 환경 변수 설정
```bash
cp .env.example .env
# .env 파일에서 필요한 값들 설정
```

3. 데이터베이스 준비
```bash
# MySQL 서버 시작
# Redis 서버 시작
```

4. 애플리케이션 실행
```bash
./gradlew bootRun
```

## 📚 API 문서

- **Swagger UI**: http://localhost:8080/swagger-ui.html
- **OpenAPI Spec**: http://localhost:8080/v3/api-docs

## 🏗️ 프로젝트 구조

```
src/main/java/com/sbpb/ddobak/server/
├── config/          # 설정 클래스
├── domain/          # 도메인별 모듈
│   ├── user/        # 사용자 도메인
│   ├── auth/        # 인증 도메인
│   └── ...
├── common/          # 공통 모듈
└── ServerApplication.java
```

## 🔧 기술 스택

- **Framework**: Spring Boot 3.5.0
- **Language**: Java 17
- **Database**: MySQL 8.0, Redis 7.0
- **Security**: Spring Security, JWT
- **Documentation**: SpringDoc OpenAPI 3
- **Test**: JUnit 5, TestContainers

## 🚦 API 규칙

### 응답 포맷
모든 API는 다음과 같은 공통 응답 포맷을 사용합니다:

```json
{
  "success": true,
  "data": { ... },
  "message": "요청이 성공적으로 처리되었습니다",
  "timestamp": "2024-01-15T10:30:00"
}
```

### 에러 처리
에러 발생 시 다음과 같은 포맷으로 응답합니다:

```json
{
  "success": false,
  "error": {
    "code": "USER_NOT_FOUND",
    "message": "사용자를 찾을 수 없습니다"
  },
  "timestamp": "2024-01-15T10:30:00"
}
```

## 🔒 보안

- JWT 기반 인증
- HTTPS 강제 사용 (운영 환경)
- Rate Limiting 적용
- SQL Injection, XSS 방지

## 🧪 테스트

```bash
# 전체 테스트 실행
./gradlew test

# 테스트 커버리지 확인
./gradlew jacocoTestReport
```

## 📝 기여 가이드

1. 이슈 생성 또는 기존 이슈 확인
2. 브랜치 생성 (`feature/issue-number`)
3. 코드 작성 및 테스트
4. Pull Request 생성
5. 코드 리뷰 및 머지

## 📞 연락처

- **개발팀**: sbpb01@gmail.com
- **이슈 신고**: [GitHub Issues](mdc:https:/github.com/ddobak/ddobak-server/issues)
```

## 🚫 문서화 안티 패턴

### 피해야 할 것들
```java
// ❌ 의미 없는 주석
public String getName() {
    return name; // name을 리턴한다
}

// ❌ 구현을 반복하는 주석
// i를 1부터 10까지 증가시킨다
for (int i = 1; i <= 10; i++) {
    // ...
}

// ❌ 오래된 주석 (코드와 불일치)
/**
 * 사용자 이메일을 검증한다 (실제로는 전화번호 검증)
 */
public boolean validatePhoneNumber(String phone) {
    // ...
}
```

### 좋은 문서화 예시
```java
// ✅ 의도와 이유를 설명하는 주석
/**
 * 외부 API 호출 시 타임아웃을 30초로 설정
 * 서드파티 서비스 응답 지연으로 인한 시스템 전체 지연 방지
 */
private static final Duration API_TIMEOUT = Duration.ofSeconds(30);

// ✅ 복잡한 비즈니스 로직 설명
/**
 * 할인 적용 우선순위:
 * 1. 쿠폰 할인 (고정 금액)
 * 2. 멤버십 할인 (비율)
 * 3. 이벤트 할인 (조건부)
 * 
 * 각 할인은 중복 적용되지 않으며, 가장 큰 할인 금액을 적용
 */
public BigDecimal calculateDiscount(Order order, List<Discount> discounts) {
    // ...
}
```

## 📋 문서화 체크리스트

### API 문서화 필수사항
- [ ] 모든 공개 API에 `@Operation` 어노테이션 추가
- [ ] 요청/응답 DTO에 `@Schema` 어노테이션 추가
- [ ] 예상 가능한 에러 케이스를 `@ApiResponse`로 문서화
- [ ] 요청 파라미터에 예시값 추가
- [ ] 인증이 필요한 API에 보안 요구사항 명시

### 코드 주석 필수사항
- [ ] 복잡한 비즈니스 로직에 의도 설명 주석 추가
- [ ] 외부 의존성이나 제약사항 주석으로 명시
- [ ] 성능 최적화나 특별한 구현 이유 설명
- [ ] TODO, FIXME 주석에는 이슈 번호 추가
