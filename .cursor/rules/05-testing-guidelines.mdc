---
description: JUnit 5 기반 단위/통합 테스트 작성, Mock 사용법, 테스트 전략, 커버리지 목표와 테스트 품질 가이드를 제공합니다.
globs: 
alwaysApply: false
---
# 🧪 테스트 코드 작성 가이드라인

## 🎯 테스트 전략 개요

### 테스트 피라미드
```
        /\
       /  \
      / E2E \      (소수) - 통합 테스트, 실제 시나리오
     /______\
    /        \
   /   API    \    (중간) - 컨트롤러, 통합 테스트
  /____________\
 /              \
/  Unit Tests    \  (다수) - 서비스, 레포지토리 단위 테스트
/__________________\
```

### 테스트 원칙
- **F.I.R.S.T**: Fast, Independent, Repeatable, Self-Validating, Timely
- **AAA 패턴**: Arrange, Act, Assert
- **Given-When-Then**: BDD 스타일 테스트 구조
- **단일 책임**: 하나의 테스트는 하나의 기능만 검증

## 📁 테스트 디렉터리 구조

```
src/test/java/com/sbpb/ddobak/server/
├── unit/                          # 단위 테스트
│   ├── domain/
│   │   ├── user/
│   │   │   ├── service/
│   │   │   │   └── UserServiceTest.java
│   │   │   └── repository/
│   │   │       └── UserRepositoryTest.java
│   │   └── auth/
│   │       └── service/
│   │           └── AuthServiceTest.java
│   └── common/
│       └── utils/
│           └── JwtUtilsTest.java
│
├── integration/                   # 통합 테스트
│   ├── controller/
│   │   ├── UserControllerTest.java
│   │   └── AuthControllerTest.java
│   └── repository/
│       └── UserRepositoryIntegrationTest.java
│
├── config/                        # 테스트 설정
│   ├── TestConfig.java
│   └── TestContainerConfig.java
│
└── fixture/                       # 테스트 데이터
    ├── UserFixture.java
    └── AuthFixture.java
```

## 🔧 테스트 환경 설정

### 기본 테스트 설정 (TestConfig.java)
```java
@TestConfiguration
@Profile("test")
public class TestConfig {
    
    @Bean
    @Primary
    public Clock testClock() {
        return Clock.fixed(
            Instant.parse("2024-01-01T00:00:00Z"), 
            ZoneId.systemDefault()
        );
    }
    
    @Bean
    @Primary
    public PasswordEncoder testPasswordEncoder() {
        // 테스트용 빠른 인코더
        return new BCryptPasswordEncoder(4);
    }
}
```

### TestContainers 설정
```java
@Testcontainers
@SpringBootTest
@TestPropertySource(properties = {
    "spring.datasource.url=jdbc:tc:mysql:8.0.33:///testdb",
    "spring.jpa.hibernate.ddl-auto=create-drop"
})
public abstract class IntegrationTestBase {
    
    @Container
    static MySQLContainer<?> mysql = new MySQLContainer<>("mysql:8.0.33")
            .withDatabaseName("testdb")
            .withUsername("test")
            .withPassword("test");
    
    @Container
    static GenericContainer<?> redis = new GenericContainer<>("redis:7.2-alpine")
            .withExposedPorts(6379);
    
    @DynamicPropertySource
    static void configureProperties(DynamicPropertyRegistry registry) {
        registry.add("spring.data.redis.host", redis::getHost);
        registry.add("spring.data.redis.port", redis::getFirstMappedPort);
    }
}
```

## 🔬 단위 테스트 작성 가이드

### Service 계층 테스트 예시
```java
@ExtendWith(MockitoExtension.class)
class UserServiceTest {
    
    @Mock
    private UserRepository userRepository;
    
    @Mock
    private PasswordEncoder passwordEncoder;
    
    @InjectMocks
    private UserService userService;
    
    @DisplayName("사용자 생성 - 성공")
    @Test
    void createUser_Success() {
        // Given
        CreateUserRequest request = CreateUserRequest.builder()
            .email("test@example.com")
            .name("테스트 사용자")
            .password("password123")
            .build();
        
        User savedUser = User.builder()
            .id(1L)
            .email(request.getEmail())
            .name(request.getName())
            .password("encoded-password")
            .status(UserStatus.ACTIVE)
            .build();
        
        when(userRepository.existsByEmail(request.getEmail())).thenReturn(false);
        when(passwordEncoder.encode(request.getPassword())).thenReturn("encoded-password");
        when(userRepository.save(any(User.class))).thenReturn(savedUser);
        
        // When
        UserResponse response = userService.createUser(request);
        
        // Then
        assertThat(response.getId()).isEqualTo(1L);
        assertThat(response.getEmail()).isEqualTo("test@example.com");
        assertThat(response.getName()).isEqualTo("테스트 사용자");
        
        verify(userRepository).existsByEmail(request.getEmail());
        verify(passwordEncoder).encode(request.getPassword());
        verify(userRepository).save(any(User.class));
    }
    
    @DisplayName("사용자 생성 - 이메일 중복 예외")
    @Test
    void createUser_DuplicateEmail_ThrowsException() {
        // Given
        CreateUserRequest request = CreateUserRequest.builder()
            .email("duplicate@example.com")
            .name("테스트 사용자")
            .password("password123")
            .build();
        
        when(userRepository.existsByEmail(request.getEmail())).thenReturn(true);
        
        // When & Then
        assertThatThrownBy(() -> userService.createUser(request))
            .isInstanceOf(DuplicateEmailException.class)
            .hasMessageContaining("duplicate@example.com");
        
        verify(userRepository).existsByEmail(request.getEmail());
        verify(userRepository, never()).save(any(User.class));
    }
}
```

### Repository 테스트 예시
```java
@DataJpaTest
@AutoConfigureTestDatabase(replace = AutoConfigureTestDatabase.Replace.NONE)
class UserRepositoryTest {
    
    @Autowired
    private TestEntityManager entityManager;
    
    @Autowired
    private UserRepository userRepository;
    
    @DisplayName("이메일로 사용자 조회 - 성공")
    @Test
    void findByEmail_Success() {
        // Given
        User user = User.builder()
            .email("test@example.com")
            .name("테스트 사용자")
            .password("password")
            .status(UserStatus.ACTIVE)
            .build();
        
        entityManager.persistAndFlush(user);
        
        // When
        Optional<User> found = userRepository.findByEmail("test@example.com");
        
        // Then
        assertThat(found).isPresent();
        assertThat(found.get().getEmail()).isEqualTo("test@example.com");
        assertThat(found.get().getName()).isEqualTo("테스트 사용자");
    }
    
    @DisplayName("이메일 존재 여부 확인")
    @Test
    void existsByEmail_ReturnsTrue_WhenEmailExists() {
        // Given
        User user = User.builder()
            .email("existing@example.com")
            .name("기존 사용자")
            .password("password")
            .status(UserStatus.ACTIVE)
            .build();
        
        entityManager.persistAndFlush(user);
        
        // When
        boolean exists = userRepository.existsByEmail("existing@example.com");
        
        // Then
        assertThat(exists).isTrue();
    }
}
```

## 🌐 통합 테스트 작성 가이드

### Controller 통합 테스트
```java
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
@AutoConfigureMockMvc
@Transactional
class UserControllerIntegrationTest extends IntegrationTestBase {
    
    @Autowired
    private MockMvc mockMvc;
    
    @Autowired
    private ObjectMapper objectMapper;
    
    @Autowired
    private UserRepository userRepository;
    
    @DisplayName("사용자 생성 API - 성공")
    @Test
    void createUser_Success() throws Exception {
        // Given
        CreateUserRequest request = CreateUserRequest.builder()
            .email("test@example.com")
            .name("테스트 사용자")
            .password("password123")
            .build();
        
        // When & Then
        mockMvc.perform(post("/api/v1/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
            .andExpect(status().isCreated())
            .andExpect(jsonPath("$.success").value(true))
            .andExpect(jsonPath("$.data.email").value("test@example.com"))
            .andExpect(jsonPath("$.data.name").value("테스트 사용자"));
        
        // 데이터베이스 검증
        Optional<User> savedUser = userRepository.findByEmail("test@example.com");
        assertThat(savedUser).isPresent();
    }
    
    @DisplayName("사용자 생성 API - 유효성 검사 실패")
    @Test
    void createUser_ValidationFail() throws Exception {
        // Given
        CreateUserRequest request = CreateUserRequest.builder()
            .email("invalid-email")  // 잘못된 이메일 형식
            .name("")               // 빈 이름
            .password("123")        // 짧은 비밀번호
            .build();
        
        // When & Then
        mockMvc.perform(post("/api/v1/users")
                .contentType(MediaType.APPLICATION_JSON)
                .content(objectMapper.writeValueAsString(request)))
            .andExpect(status().isBadRequest())
            .andExpect(jsonPath("$.success").value(false))
            .andExpect(jsonPath("$.error.code").value("INVALID_INPUT"));
    }
}
```

## 🏭 테스트 데이터 Fixture

### UserFixture 클래스
```java
public class UserFixture {
    
    public static User defaultUser() {
        return User.builder()
            .id(1L)
            .email("test@example.com")
            .name("테스트 사용자")
            .password("encoded-password")
            .status(UserStatus.ACTIVE)
            .createdAt(LocalDateTime.of(2024, 1, 1, 0, 0))
            .updatedAt(LocalDateTime.of(2024, 1, 1, 0, 0))
            .build();
    }
    
    public static User userWithEmail(String email) {
        return defaultUser().toBuilder()
            .email(email)
            .build();
    }
    
    public static CreateUserRequest createUserRequest() {
        return CreateUserRequest.builder()
            .email("test@example.com")
            .name("테스트 사용자")
            .password("password123")
            .build();
    }
    
    public static List<User> activeUsers(int count) {
        return IntStream.range(0, count)
            .mapToObj(i -> defaultUser().toBuilder()
                .id((long) (i + 1))
                .email("user" + i + "@example.com")
                .build())
            .collect(Collectors.toList());
    }
}
```

## 🔍 테스트 검증 패턴

### AssertJ 사용 예시
```java
// 기본 검증
assertThat(user.getName()).isEqualTo("테스트 사용자");
assertThat(user.isActive()).isTrue();

// 컬렉션 검증
assertThat(users)
    .hasSize(3)
    .extracting(User::getEmail)
    .containsExactly("user1@test.com", "user2@test.com", "user3@test.com");

// 예외 검증
assertThatThrownBy(() -> userService.getUserById(999L))
    .isInstanceOf(UserNotFoundException.class)
    .hasMessageContaining("User not found with ID: 999");

// 객체 필드 검증
assertThat(response)
    .extracting("id", "email", "name")
    .containsExactly(1L, "test@example.com", "테스트 사용자");
```

## 📊 테스트 커버리지 목표

### 커버리지 기준
- **Line Coverage**: 최소 80%
- **Branch Coverage**: 최소 70%
- **Class Coverage**: 최소 90%

### 우선순위
1. **Service 계층**: 95% 이상 (비즈니스 로직 핵심)
2. **Repository 계층**: 85% 이상 (데이터 접근 로직)
3. **Controller 계층**: 80% 이상 (API 인터페이스)
4. **Utility 클래스**: 90% 이상 (공통 기능)

## 🚫 테스트 안티 패턴

### 피해야 할 패턴들
```java
// ❌ 테스트 간 의존성
@Test
void test1() {
    // 전역 변수 설정
}

@Test
void test2() {
    // test1 결과에 의존
}

// ❌ 너무 많은 검증
@Test
void testEverything() {
    // 10개 이상의 assert
}

// ❌ 의미 없는 테스트
@Test
void testGetter() {
    user.setName("test");
    assertEquals("test", user.getName());
}

// ✅ 좋은 테스트
@Test
@DisplayName("비밀번호 변경 시 암호화되어 저장된다")
void changePassword_ShouldEncryptAndSave() {
    // Given
    User user = UserFixture.defaultUser();
    String newPassword = "newPassword123";
    
    // When
    user.changePassword(newPassword, passwordEncoder);
    
    // Then
    assertThat(user.getPassword()).isNotEqualTo(newPassword);
    assertThat(passwordEncoder.matches(newPassword, user.getPassword())).isTrue();
}
```

## 📋 테스트 체크리스트

### 테스트 작성 전 확인사항
- [ ] 테스트할 기능이 명확한가?
- [ ] Given-When-Then 구조로 작성했는가?
- [ ] 테스트 메서드명이 의도를 명확히 표현하는가?
- [ ] 하나의 테스트가 하나의 시나리오만 검증하는가?
- [ ] Mock 객체 사용이 적절한가?
- [ ] 경계값 테스트가 포함되어 있는가?
- [ ] 예외 상황 테스트가 포함되어 있는가?
