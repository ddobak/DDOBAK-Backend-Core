---
description: 
globs: 
alwaysApply: true
---
# 🎯 DDOBAK 프로젝트 메인 규칙 라우터

## 🚀 프로젝트 개요
- **프로젝트명**: DDOBAK Server
- **기술 스택**: Java 17, Spring Boot 3.5.0
- **아키텍처**: Clean Architecture, Domain-Driven Design
- **현재 상태**: ✅ Skeleton 구조 완성, 개발 준비 완료
- **패키지 구조**: [01-project-structure.mdc](mdc:01-project-structure.mdc)

## 🤖 **자동 규칙 업데이트 시스템** (필수)

### 🔄 규칙 업데이트 트리거 조건
**AI는 다음 상황에서 관련 규칙을 자동으로 업데이트해야 합니다:**

```
IF (프로젝트 구조 변경 감지)
THEN 01-project-structure.mdc 업데이트

IF (새로운 의존성 추가 OR 버전 변경)
THEN 02-dependencies-versions.mdc 업데이트

IF (설정 파일 변경 OR 새로운 환경 추가)
THEN 03-configuration-management.mdc 업데이트

IF (새로운 코딩 패턴 도입 OR 아키텍처 변경)
THEN 04-code-style-patterns.mdc 업데이트

IF (테스트 전략 변경 OR 새로운 테스트 도구 도입)
THEN 05-testing-guidelines.mdc 업데이트

IF (보안 정책 변경 OR 새로운 인증 방식 추가)
THEN 06-security-guidelines.mdc 업데이트

IF (문서화 표준 변경 OR 새로운 API 스펙)
THEN 07-documentation-standards.mdc 업데이트

IF (성능 최적화 기법 도입 OR 모니터링 도구 변경)
THEN 08-performance-optimization.mdc 업데이트
```

### 🎯 자동 업데이트 실행 원칙
1. **즉시 업데이트**: 변경사항 감지 시 해당 규칙 즉시 수정
2. **연관 규칙 확인**: 변경이 다른 규칙에 미치는 영향 분석
3. **일관성 유지**: 모든 규칙 간 상호 일치성 보장
4. **버전 관리**: 중요한 변경사항은 메모리에 기록
5. **사용자 알림**: 규칙 업데이트 시 간단한 설명 제공

### 📋 현재 프로젝트 상태 반영 (2024년 6월 기준)
```
✅ 완료된 작업:
- Clean Architecture 기반 skeleton 구조 생성
- 4개 도메인 (user, auth, documentProcess, externalContent) 준비
- 계층별 폴더 분리 (controller/service/dto/entity/repository)
- 공통 모듈 (common/exception, response, utils) 구성
- 설정 모듈 (config) 준비
- 테스트 구조 준비

🔄 진행 필요:
- build.gradle 의존성 추가 (현재 기본 starter만 있음)
- application.properties → application.yml 변환
- 각 도메인별 실제 구현 클래스 작성
- 설정 클래스 (Security, Swagger, Redis 등) 구현
```

## 📋 핵심 개발 원칙 (항상 적용)

### 🔒 절대 변경 금지 사항
- **Java 17** 버전 (LTS 고정)
- **Spring Boot 3.5.0** 버전 (안정성 보장)
- **패키지 구조** (com.sbpb.ddobak.server.*)
- **설정 파일 형식** (application.yml 사용)

### 📏 코딩 표준 (항상 준수)
- **한국어 주석** (코드 설명용)
- **영어 로그 메시지** (서버 로그용)
- **Clean Code 원칙** 준수
- **단일 책임 원칙** 적용
- **90% 이상 확신**이 있을 때만 코드 수정

## 🗺️ 상황별 규칙 참조 가이드

### 📦 프로젝트 구조 및 설정 관련
```
IF (새로운 도메인 추가 OR 패키지 구조 질문)
THEN 참조: [01-project-structure.mdc](mdc:01-project-structure.mdc)
     자동업데이트: 새 도메인 추가 시 구조 가이드 업데이트

IF (의존성 추가 OR 버전 업그레이드 질문)
THEN 참조: [02-dependencies-versions.mdc](mdc:02-dependencies-versions.mdc)
     자동업데이트: build.gradle 변경 시 의존성 목록 갱신

IF (환경별 설정 OR application.yml 관련)
THEN 참조: [03-configuration-management.mdc](mdc:03-configuration-management.mdc)
     자동업데이트: 설정 파일 변경 시 환경별 가이드 수정
```

### 🎨 코드 작성 관련
```
IF (코드 스타일 OR 디자인 패턴 OR 명명 규칙 질문)
THEN 참조: [04-code-style-patterns.mdc](mdc:04-code-style-patterns.mdc)
     자동업데이트: 새로운 패턴 도입 시 예제 코드 추가

IF (클래스 작성 OR 메서드 구현 OR 리팩토링)
THEN 참조: [04-code-style-patterns.mdc](mdc:04-code-style-patterns.mdc)
     자동업데이트: 실제 구현된 클래스 기반으로 예제 갱신
```

### 🧪 테스트 관련
```
IF (테스트 코드 작성 OR 테스트 전략 OR Mock 사용)
THEN 참조: [05-testing-guidelines.mdc](mdc:05-testing-guidelines.mdc)
     자동업데이트: 새로운 테스트 도구 도입 시 가이드 추가

IF (단위테스트 OR 통합테스트 OR 테스트 픽스처)
THEN 참조: [05-testing-guidelines.mdc](mdc:05-testing-guidelines.mdc)
     자동업데이트: 실제 테스트 작성 패턴 기반으로 예제 개선
```

### 🔐 보안 관련
```
IF (인증 OR 인가 OR JWT OR OAuth 구현)
THEN 참조: [06-security-guidelines.mdc](mdc:06-security-guidelines.mdc)
     자동업데이트: 보안 구현 완료 시 실제 설정 예제 반영

IF (Spring Security OR 보안 취약점 OR 비밀번호 정책)
THEN 참조: [06-security-guidelines.mdc](mdc:06-security-guidelines.mdc)
     자동업데이트: 보안 정책 변경 시 관련 규칙 즉시 수정
```

### 📚 문서화 관련
```
IF (API 문서화 OR Swagger OR 주석 작성)
THEN 참조: [07-documentation-standards.mdc](mdc:07-documentation-standards.mdc)
     자동업데이트: API 스펙 변경 시 문서 템플릿 갱신

IF (README 작성 OR 코드 주석 OR OpenAPI 스펙)
THEN 참조: [07-documentation-standards.mdc](mdc:07-documentation-standards.mdc)
     자동업데이트: 문서화 도구 변경 시 가이드 수정
```

### ⚡ 성능 관련
```
IF (성능 최적화 OR 캐싱 OR DB 쿼리 최적화)
THEN 참조: [08-performance-optimization.mdc](mdc:08-performance-optimization.mdc)
     자동업데이트: 성능 개선 기법 적용 시 모범 사례 추가

IF (비동기 처리 OR 모니터링 OR JVM 튜닝)
THEN 참조: [08-performance-optimization.mdc](mdc:08-performance-optimization.mdc)
     자동업데이트: 모니터링 도구 변경 시 설정 가이드 갱신
```

## 🎯 상황별 우선순위 매트릭스

### 🚨 높은 우선순위 (즉시 적용)
1. **보안 관련** - 보안 취약점, 인증/인가 이슈
2. **프로젝트 구조** - 패키지 구조, 계층 분리
3. **코드 스타일** - 클린 코드, 명명 규칙

### ⚠️ 중간 우선순위 (개발 중 적용)
1. **테스트 코드** - 단위/통합 테스트 작성
2. **문서화** - API 문서, 코드 주석
3. **설정 관리** - 환경별 설정 분리

### 📈 낮은 우선순위 (최적화 단계)
1. **성능 최적화** - 캐싱, 쿼리 최적화
2. **모니터링** - 메트릭 수집, APM 연동

## 🔄 규칙 적용 플로우 (자동 업데이트 포함)

```mermaid
graph TD
    A[코딩 작업 시작] --> B{작업 유형 파악}
    
    B --> C[새 기능 개발]
    B --> D[버그 수정]
    B --> E[리팩토링]
    B --> F[성능 개선]
    
    C --> G[프로젝트 구조 확인]
    G --> H[보안 요구사항 확인]
    H --> I[코드 스타일 적용]
    I --> J[테스트 코드 작성]
    J --> K[문서화]
    K --> L{규칙 업데이트 필요?}
    
    D --> M[원인 분석]
    M --> N[관련 규칙 확인]
    N --> I
    
    E --> O[클린 코드 원칙 적용]
    O --> I
    
    F --> P[성능 규칙 적용]
    P --> Q[모니터링 추가]
    Q --> K
    
    L -->|Yes| R[관련 규칙 자동 업데이트]
    L -->|No| S[작업 완료]
    R --> S
```

## 📝 빠른 참조 체크리스트

### ✅ 모든 작업 시 필수 확인
- [ ] Java 17, Spring Boot 3.5.0 유지
- [ ] 패키지 구조 준수 (domain/controller/service/dto/entity/repository)
- [ ] 한국어 주석, 영어 로그 메시지
- [ ] 90% 이상 확신 후 코드 수정
- [ ] **변경사항이 규칙 업데이트를 필요로 하는지 확인**

### ✅ 새 기능 개발 시
- [ ] [프로젝트 구조](mdc:01-project-structure.mdc) 규칙 준수
- [ ] [보안 가이드라인](mdc:06-security-guidelines.mdc) 확인
- [ ] [코드 스타일](mdc:04-code-style-patterns.mdc) 적용
- [ ] [테스트 코드](mdc:05-testing-guidelines.mdc) 작성
- [ ] **새로운 패턴/도구 도입 시 관련 규칙 자동 업데이트**

### ✅ 배포 전 최종 확인
- [ ] [보안 체크리스트](mdc:06-security-guidelines.mdc) 완료
- [ ] [성능 최적화](mdc:08-performance-optimization.mdc) 검토
- [ ] [API 문서화](mdc:07-documentation-standards.mdc) 완료
- [ ] 테스트 커버리지 80% 이상
- [ ] **모든 규칙이 현재 프로젝트 상태와 일치하는지 검증**

## 🎯 **다음 우선 개발 단계** (현재 skeleton 기준)

### 1️⃣ 즉시 진행 (인프라 설정)
- `build.gradle` 필수 의존성 추가
- `application.yml` 기본 설정 작성
- 공통 응답/예외 클래스 구현

### 2️⃣ 단기 개발 (핵심 기능)
- User 도메인 구현 (Entity, Repository, Service, Controller)
- Auth 도메인 구현 (JWT, OAuth)
- Security 설정 구현

### 3️⃣ 중기 개발 (비즈니스 로직)
- DocumentProcess 도메인 구현
- ExternalContent 도메인 구현
- API 문서화 (Swagger)

## 🚫 절대 금지 사항
- Java, Spring Boot 버전 변경
- 패키지 구조 임의 변경
- 보안 규칙 우회
- 테스트 없는 코드 커밋
- 문서화 없는 API 추가
- **규칙 업데이트 시 일관성 검증 생략**
